package test

import (
	"testing"

	"github.com/nbio/st"
	"github.com/tmconsulting/acase-golang-sdk/acaseSts"
)

func TestOrderInfoRequest_CheckStatus_Ok(t *testing.T) {
	testRequest("orderinfo_response_example.xml", false)
	defer gockOff()

	req := &acaseSts.OrderInfoRequestType{Id:"2054859"}
	data, err := acApi.OrderInfoRequest(req)
	er := getCustomErrorType()
	st.Expect(t, err, er)
	st.Expect(t, data.Language, "ru")
	st.Expect(t, data.Password, "MyPassword")
	st.Expect(t, data.Id, "2054859")
	st.Expect(t, data.ReferenceNumber, "1583920")
	st.Expect(t, data.ReferenceNumberName, "Ref No")
	st.Expect(t, data.RegistrationDate, "03.12.2011")
	st.Expect(t, data.DeadlineDate, "04.12.2011")
	st.Expect(t, data.Price, float64(4550.00))
	st.Expect(t, data.TravelAgencyCommission, float64(0.00))
	st.Expect(t, data.Penalty, float64(0.00))
	st.Expect(t, data.StartDate, "05.12.2011")
	st.Expect(t, data.EndDate, "06.12.2011")
	st.Expect(t, data.InvoiceRule, 2)
	st.Expect(t, data.InvoiceId, "3669998")
	st.Expect(t, data.ConfirmId, "9341805")
	st.Expect(t, data.ContractNumber, "0157/13")
	st.Expect(t, data.ContractDate, "01.07.2013")
	st.Expect(t, data.GuaranteeAmount, float64(0.00))
	st.Expect(t, data.Currency.Code, 2)
	st.Expect(t, data.Currency.Name, "RUB")
	st.Expect(t, data.Autonom.Name, "Автономный")
	st.Expect(t, data.Autonom.Code, 1)
	st.Expect(t, data.VatLimit.Code, 1)
	st.Expect(t, data.VatLimit.Name, "Без ограничений")
	st.Expect(t, data.TypeContract.Code, 3)
	st.Expect(t, data.TypeContract.Name, "Агентский")
	st.Expect(t, data.WhereToPay.Code, 3)
	st.Expect(t, data.WhereToPay.Name, "Оплата ООО \"АКАДЕМСЕРВИС\" согласно договору")
	st.Expect(t, data.SubjectToProcessing.Code, 1)
	st.Expect(t, data.SubjectToProcessing.Name, "Да")
	st.Expect(t, data.FinancialCondition.Code, 1)
	st.Expect(t, data.FinancialCondition.Name, "Не требуется")
	st.Expect(t, data.Status.Code, 65)
	st.Expect(t, data.Status.Name, "Забронирован")
	st.Expect(t, data.ContactPerson.Name, "XML")
	st.Expect(t, data.ContactPerson.Phone, "")
	st.Expect(t, data.ContactPerson.Fax, "")
	st.Expect(t, data.ContactPerson.Email, "test@test.ru")
	st.Expect(t, data.AccountDetails.IsGain.Code, 3)
	st.Expect(t, data.AccountDetails.IsGain.Name, "-")
	st.Expect(t, data.Customer.FullName, "ООО Ромашка")
	st.Expect(t, data.Customer.ZipCode, "123456")
	st.Expect(t, data.Customer.Address, "Тестовая ул. д.5/2 оф. 5")
	st.Expect(t, data.Customer.PIAddress, "Россия, 123456, Москва, Тестовая ул. д.5/2 оф. 5")
	st.Expect(t, data.Customer.INN, "1234567890")
	st.Expect(t, data.Customer.KPP, "123456789")
	st.Expect(t, data.Customer.Phone, "+7 495 123 45 56")
	st.Expect(t, data.Customer.Name, "Ромашка")
	st.Expect(t, data.Customer.Code, 1322075)
	st.Expect(t, data.Customer.BuyerType.Code, 3)
	st.Expect(t, data.Customer.BuyerType.Name, "Юридическое лицо")
	st.Expect(t, data.Customer.Country.Code, 9)
	st.Expect(t, data.Customer.Country.Name, "Россия")
	st.Expect(t, data.Customer.City.Code, 2)
	st.Expect(t, data.Customer.City.Name, "Москва")
	st.Expect(t, data.Customer.City.CityType.Code, 2)
	st.Expect(t, data.Customer.City.CityType.Name, "Город")
	st.Expect(t, data.Customer.City.AdmUnit1.Code, 1)
	st.Expect(t, data.Customer.City.AdmUnit1.Name, "Не определено")
	st.Expect(t, data.Customer.City.AdmUnit2.Code, 1)
	st.Expect(t, data.Customer.City.AdmUnit2.Name, "Не определено")
	st.Expect(t, data.Customer.Actual.Code, 1)
	st.Expect(t, data.Customer.Actual.Name, "Да")
	st.Expect(t, data.Customer.AllowModify.Code, 1)
	st.Expect(t, data.Customer.AllowModify.Name, "Да")
	st.Expect(t, data.IsCustomer.Code, 1)
	st.Expect(t, data.IsCustomer.Name, "Да")
	st.Expect(t, len(data.AccommodationList.Accommodation), 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].Id, 2835883)
	st.Expect(t, data.AccommodationList.Accommodation[0].ArrivalDate, "05.12.2011")
	st.Expect(t, data.AccommodationList.Accommodation[0].ArrivalTime, "10:00")
	st.Expect(t, data.AccommodationList.Accommodation[0].DepartureDate, "06.12.2011")
	st.Expect(t, data.AccommodationList.Accommodation[0].DepartureTime, "17:00")
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfNights, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfRooms, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfGuests, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfExtraBedsAdult, 0)
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfExtraBedsChild, 0)
	st.Expect(t, data.AccommodationList.Accommodation[0].NumberOfExtraBedsInfant, 0)
	st.Expect(t, data.AccommodationList.Accommodation[0].AdditionalInfo, "")
	st.Expect(t, data.AccommodationList.Accommodation[0].SupplierInfo, "")
	st.Expect(t, data.AccommodationList.Accommodation[0].ConfirmationNumber, "154041")
	st.Expect(t, data.AccommodationList.Accommodation[0].Price, float64(4550.00))
	st.Expect(t, data.AccommodationList.Accommodation[0].VATIncludedInPrice, float64(694.07))
	st.Expect(t, data.AccommodationList.Accommodation[0].TravelAgencyCommission, float64(0.00))
	st.Expect(t, data.AccommodationList.Accommodation[0].Penalty, float64(0.00))
	st.Expect(t, data.AccommodationList.Accommodation[0].DeadlineDate, "04.12.2011")
	st.Expect(t, data.AccommodationList.Accommodation[0].DeadlineTimeLoc, "04.12.2011 13:00")
	st.Expect(t, data.AccommodationList.Accommodation[0].DeadlineTimeSys, "04.12.2011 13:00")
	st.Expect(t, data.AccommodationList.Accommodation[0].DeadlineTimeUTC, "04.12.2011 10:00")
	st.Expect(t, data.AccommodationList.Accommodation[0].PossiblePenaltySize, float64(4550.00))
	st.Expect(t, data.AccommodationList.Accommodation[0].VoucherId, 2835883)
	st.Expect(t, data.AccommodationList.Accommodation[0].ReferenceNumber, "12345")
	st.Expect(t, data.AccommodationList.Accommodation[0].ToBeCancelled.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].ToBeCancelled.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].ToBeChanged.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].ToBeChanged.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].Hotel.Code, 500040)
	st.Expect(t, data.AccommodationList.Accommodation[0].Hotel.Name, "Оксана")
	st.Expect(t, data.AccommodationList.Accommodation[0].ObjType.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].ObjType.Name, "Гостиница")
	st.Expect(t, data.AccommodationList.Accommodation[0].ObjType.NameWhere, "гостинице")
	st.Expect(t, data.AccommodationList.Accommodation[0].Country.Code, 9)
	st.Expect(t, data.AccommodationList.Accommodation[0].Country.Name, "Россия")
	st.Expect(t, data.AccommodationList.Accommodation[0].AdmUnit1.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].AdmUnit1.Name, "Не определено")
	st.Expect(t, data.AccommodationList.Accommodation[0].AdmUnit2.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].AdmUnit2.Name, "Не определено")
	st.Expect(t, data.AccommodationList.Accommodation[0].TypeOfPlace.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].TypeOfPlace.Name, "")
	st.Expect(t, data.AccommodationList.Accommodation[0].City.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].City.Name, "Москва")
	st.Expect(t, data.AccommodationList.Accommodation[0].Status.Code, 65)
	st.Expect(t, data.AccommodationList.Accommodation[0].Status.Name, "Забронировано")
	st.Expect(t, data.AccommodationList.Accommodation[0].AmendmentRejected.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].AmendmentRejected.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].AllowCancel.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].AllowCancel.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].AllowModify.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].AllowModify.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.Code, 932734)
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RoomName, "Студио двухместный (две кровати)")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RoomCode, 900123)
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RateCode, 900055)
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RateName, "FIT")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RateDescription, "")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RateGroupCode, 4)
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.RateGroupName, "FIT")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.Allotment.Code, "9500001+1103690+1100604+2")
	st.Expect(t, data.AccommodationList.Accommodation[0].Product.Allotment.Name, "")
	st.Expect(t, data.AccommodationList.Accommodation[0].Meal.Code, 0)
	st.Expect(t, data.AccommodationList.Accommodation[0].Meal.Name, "Завтрак \"Континентальный\"")
	st.Expect(t, len(data.AccommodationList.Accommodation[0].Persons.Items), 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].LastName, "KOLESIN")
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].FirstName, "URIY")
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].Category.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].Category.Name, "Господин")
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].Citizenship.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].Persons.Items[0].Citizenship.Name, "Hе имеет значения")
	st.Expect(t, len(data.AccommodationList.Accommodation[0].Penalties.Items), 0)
	st.Expect(t, data.AccommodationList.Accommodation[0].IsEarlyCheckIn.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].IsEarlyCheckIn.Name, "Да")
	st.Expect(t, data.AccommodationList.Accommodation[0].CriticalEarlyCheckIn.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].CriticalEarlyCheckIn.Name, "Критично")
	st.Expect(t, data.AccommodationList.Accommodation[0].EarlyCheckInConfirmationStatus.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].EarlyCheckInConfirmationStatus.Name, "Не подтвержден")
	st.Expect(t, data.AccommodationList.Accommodation[0].IsHour.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].IsHour.Name, "Нет")
	st.Expect(t, data.AccommodationList.Accommodation[0].IsLateCheckOut.Code, 1)
	st.Expect(t, data.AccommodationList.Accommodation[0].IsLateCheckOut.Name, "Да")
	st.Expect(t, data.AccommodationList.Accommodation[0].CriticalLateCheckOut.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].CriticalLateCheckOut.Name, "Некритично")
	st.Expect(t, data.AccommodationList.Accommodation[0].LateCheckOutConfirmationStatus.Code, 2)
	st.Expect(t, data.AccommodationList.Accommodation[0].LateCheckOutConfirmationStatus.Name, "Не подтвержден")
}

func TestOrderInfoRequest_Error(t *testing.T) {
	testRequest("orderinfo_error_example.xml", true)
	defer gockOff()

	req := &acaseSts.OrderInfoRequestType{}
	req.Id = "001"
	_, err := acApi.OrderInfoRequest(req)

	st.Expect(t, err.Code, "9998")
	st.Expect(t, err.Message, "Доступ запрещен !")
}

